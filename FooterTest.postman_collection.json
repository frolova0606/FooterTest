{
	"info": {
		"_postman_id": "401ade62-7578-49ff-9a5e-fe917a1d07d8",
		"name": "Functional testing",
		"description": "> This collection identifies the test cases to ensure that the Intergalactic Bank API returns appropriate responses by testing against functional requirements. Check out the [End-to-end testing collection](https://www.postman.com/templates/68de712c-6b56-4e31-8b0b-627360820279/End-to-end-testing) and [Integration testing collection](https://www.postman.com/templates/6f788c17-067a-4074-a528-d07df1df9529/Integration-testing-%23example) to see other test cases for this API. \n  \n\n## ü™ê Get Started\n\nThe fictional Intergalactic Bank Services team is responsible for testing against the functional requirements for this service. You can use this collection to familiarize yourself with the service and its expected behavior or validate that the changes you make to this service conform to the requirements.\n\nSteps to test the Intergalactic Bank API:\n\n1. **Review tests and scripts:** [Tests](https://learning.postman.com/docs/writing-scripts/test-scripts/) are written under the Scripts tab at the folder and request levels. Different testing requirements are distributed between the folders, so be sure to read the documentation for each folder to understand what is being tested.\n    \n2. **Run tests:** To run the collection, navigate to Run Collection from the collection menu. Note that the Setup folder creates and stores resources that will be tested in the Account Tests folder, so these setup requests should always be a prerequisite.\n    \n3. **Review test results:** We have included error messages for many of the test cases to help debug what may be wrong with the service. If using this collection as a pre-merge check, be sure to have all tests passing before submitting (and no, deleting the failing test cases isn‚Äôt an option üòâ).\n    \n\nFor more details, check out the additional sections below, and click `View Complete Documentation` for the complete documentation. If you have questions about the folder or request, look for the documentation icon for documentation-in-context.\n\n## üîç What we‚Äôre testing\n\n- In this collection, we are evaluating specific pieces of data for correctness. We test data types and workflows in our other collections.\n    \n- Each of our test requests is named after a specific business rule we are evaluating, and these rules correspond to our stakeholder‚Äôs specifications.\n    \n- Our setup and teardown requests are only tested for status code to make sure they run successfully. These endpoints are tested more in depth in our other collections.\n    \n\n## üßë‚ÄçüíªHow your team can use this collection:\n\n- **Add a mock server to speed up development:** Adding functionality to this service? Since this collection has example responses, you can add a mock server that will return the expected results. Start writing tests against the mock, and once your additions are live, you can swap out the URLs and have a live test suite.\n    \n- **Integrate tests with your CI/CD pipeline:** This comprehensive test suite is a great addition to your existing CI/CD pipeline. Generate the Postman CLI command from the Collection Runner and add this step to your existing checks each time you make a commit affecting this service.\n    \n- **Add a monitor:** If your team is contributing to or relying on this service, it‚Äôs a good idea to keep tabs on the status. Adding a monitor to this collection can give you confidence that the service is up and running, and alert you to any breaking changes that may have occurred.\n    \n\n## üîíA note on authorization\n\nThis API uses an API key-based authorization. In this collection, we test various access control scenarios, and therefore have different authorization setups throughout. Check the folder-level authorization information to see which authorization, if any, is being applied to the included requests.\n\n## üëÄ View and share run results\n\nInterested in seeing previous run results? We‚Äôre happy to share, and have a few ways for you to stay in the loop:\n\n- You can also share individual run reports from this page.\n    \n- Monitors: If you have a monitor set up for this collection, you can see historical run information by clicking on the Monitors tab on the right sidebar. You can also have the results sent to Slack or other services by setting up an integration.\n    \n\n## ü§ùIncrease test coverage\n\nThe Intergalactic Bank Services team wants your team to have everything they need to successfully test our services with their applications. Have you added functionality to the API, or written additional test cases we should include? Reach us on our internal Slack by tagging `@bank-services`. Or add an [inline comment](https://learning.postman.com/docs/collaborating-in-postman/working-with-your-team/discussing-your-work/) to this collection with your test case suggestions.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39520711"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "Generate new API key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//save api key for use in the following folders",
									"let response = pm.response.json()",
									"pm.collectionVariables.set('apiKey', response.apiKey)",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth"
							]
						},
						"description": "Generate a new API key and save it as a collection variable."
					},
					"response": [
						{
							"name": "Generate New API Key",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/auth",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"auth"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Sun, 10 Mar 2024 21:41:25 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "43"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "uWebSockets",
									"value": "20"
								}
							],
							"cookie": [],
							"body": "{\n    \"apiKey\": \"123456789\"\n}"
						}
					]
				}
			],
			"description": "This folder sets up the resources needed for the test folders later in the collection:\n\n1. **Generate new API key** - Generates a new API key for use in the collection and saves the value as a collection variable, authorizing all following requests.\n2. **Create** **`fromAccount`** - This account is created to test the results of a transaction. Saves the accountId as a collection variable, named as `fromAccountId`. This account will send funds in a transfer.\n3. **Create** **`toAccount`** - Creates a new account that we will use in the `Account Tests` folder. Saves the accountId as a collection variable, named as `toAccountId`. This account will receive a transfer of funds.\n4. **Transfer 500 coins to \"to\" account** - Transfer 500 coins from the `fromAccount` to the `toAccount`."
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{apiKey}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "api-key",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Status code is 200\", function () {",
					"    pm.response.to.have.status(200);",
					"});",
					"",
					"// –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL-–∞–¥—Ä–µ—Å–∞ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
					"const pageUrls = [",
					"  'https://only.digital/',",
					"  'https://only.digital/projects',",
					"  'https://only.digital/company',",
					"  'https://only.digital/job',",
					"  'https://only.digital/contacts'",
					"];",
					"",
					"// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Ñ—É—Ç–µ—Ä–∞ –∏ –µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤",
					"function checkFooter(responseBody) {",
					"  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É—Ç–µ—Ä –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ",
					"  if (responseBody.includes('footer')) {",
					"    console.log('–ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ—É—Ç–µ—Ä');",
					"",
					"    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Ñ—É—Ç–µ—Ä–µ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏",
					"    pm.expect(responseBody).to.contain('awwwards.com/Ilyaredko/');",
					"    pm.expect(responseBody).to.contain('vk.com/onlydigitalagency');",
					"    pm.expect(responseBody).to.contain('t.me/onlycreativedigitalagency');",
					"    pm.expect(responseBody).to.contain('vimeo.com/');",
					"    pm.expect(responseBody).to.contain('behance.net/onlydigitalagency');",
					"  } ",
					"  else {",
					"    console.log('–ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ—É—Ç–µ—Ä');",
					"  }",
					"}",
					"",
					"// –ò—Ç–µ—Ä–∏—Ä—É–µ–º –ø–æ URL-–∞–¥—Ä–µ—Å–∞–º —Å—Ç—Ä–∞–Ω–∏—Ü –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã",
					"pageUrls.forEach(url => {",
					"  pm.test(`–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É—Ç–µ—Ä–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${url}`, function () {",
					"    pm.sendRequest(url, function (err, response) {",
					"      if (err) {",
					"        throw err;",
					"      }",
					"",
					"      const responseBody = response.text();",
					"      checkFooter(responseBody);",
					"    });",
					"  });",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://template.postman-echo.com",
			"type": "string"
		},
		{
			"key": "apiKey",
			"value": "hRkgiBSD.alY86KwTdRXh2WHrgH1Gs"
		}
	]
}